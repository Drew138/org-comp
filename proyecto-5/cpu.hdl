CHIP cpu {    
	IN  inM[16],
	// M value input  (M = contents of RAM[A])        
		instruction[16], // Instruction for execution        
		reset;           // Signals whether to re-start the current                         
	// program (reset==1) or continue executing   
	// the current program (reset==0).    
	OUT outM[16],  // M value output        
		writeM,    // Write to M?         
		addressM[15], // Address in data memory (of M)        
		pc[15];   // address of next instruction    
	PARTS:  // Put your code here:    
	Or(a=instruction[15], b=false, out=tipoC);    
	Not(in=instruction[15], out=tipoA);    //Registro A    
	And(a=tipoC, b=instruction[5], out=tipoCWriteA);  //d1    
	Or(a=tipoA, b=tipoCWriteA, out=loadA);    
	Mux16(a=instruction, b=outALU, sel=tipoCWriteA, out=irAReg);    
	ARegister(in=irAReg, load=loadA, out[0..14]=addresM, out=outAReg);    //Registro D    
	And(a=tipoC, b=instruction[4], out=loadD);   
	DRegister(in=outALU, load=loadD, out=outDReg);    //Mux entrada ALU    
	Mux16(a=outAReg, b=inM, sel=instruction[12], out=outAoM);    
	ALU(x=outDReg,
        y=outAoM,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9], 
		ny=instruction[8], 
		f=instruction[7],  
		no=instruction[6], 
		out=outALU, 
		out=outM,  
		zr=esZeroSalida,  
		ng=esNegSalida);    //Jump y al PC    
		Not(in=esNegSalida, out=esNoNegSalida);   
	Not(in=esZeroSalida, out=esNoZeroSalida);    
	And(a=esNoNegSalida, b=esNoZeroSalida, out=esPositivo);    
	And(a=tipoC, b=instruction[3], out=writeM);    //Jump    
	And(a=esPositivo, b=instruction[0], out=JGT);    
	And(a=esZeroSalida, b=instruction[1], out=JEQ);    
	And(a=esNegSalida, b=instruction[2], out=JLT);    
	Or(a=JEQ, b=JLT, out=JLE);    
	Or(a=JLE, b=JGT, out=jumpA);    
	And(a=tipoC, b=jumpA, out=loadPC);    
	Not(in=loadPC, out=incPC);    
	Pc(in=outAReg, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}